/*
Copyright 2025.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package manager contains just the setup for the mcr manager and broker.
package manager

import (
	"fmt"

	"k8s.io/apimachinery/pkg/runtime/schema"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"

	mctrl "sigs.k8s.io/multicluster-runtime"
	"sigs.k8s.io/multicluster-runtime/pkg/multicluster"
	"sigs.k8s.io/multicluster-runtime/providers/multi"

	brokerv1alpha1 "github.com/platform-mesh/resource-broker/api/broker/v1alpha1"
	"github.com/platform-mesh/resource-broker/pkg/broker"
)

func init() {
	utilruntime.Must(brokerv1alpha1.AddToScheme(scheme.Scheme))
	// +kubebuilder:scaffold:scheme
}

// Options are the options for setting up the manager.
type Options struct {
	MgrOptions mctrl.Options

	// Name is a workaround because SkipNameValidation does not seem to work
	Name string

	Local          *rest.Config
	Compute        *rest.Config
	Source, Target multicluster.Provider
	GVKs           []schema.GroupVersionKind
}

// Setup sets up the manager and the broker.
func Setup(opts Options) (mctrl.Manager, error) {
	// TODO: The clients generated by the clusters coming out of the
	// proivders from mcr use this scheme and the manager should use it
	// as well. Not convention but it is what is is.
	opts.MgrOptions.Scheme = scheme.Scheme

	providers := multi.New(multi.Options{})
	if err := providers.AddProvider(broker.ConsumerPrefix, opts.Source); err != nil {
		return nil, fmt.Errorf("unable to add source provider: %w", err)
	}
	if err := providers.AddProvider(broker.ProviderPrefix, opts.Target); err != nil {
		return nil, fmt.Errorf("unable to add target provider: %w", err)
	}

	mgr, err := mctrl.NewManager(opts.Local, providers, opts.MgrOptions)
	if err != nil {
		return nil, fmt.Errorf("unable to start manager: %w", err)
	}

	if _, err := broker.NewBroker(
		opts.Name,
		mgr,
		opts.Source, opts.Target,
		opts.GVKs...,
	); err != nil {
		return nil, fmt.Errorf("unable to set up broker with manager: %w", err)
	}

	return mgr, nil
}
